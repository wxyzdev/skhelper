"use strict";function _convertStringIntoLevel(e){let o=LogLevel.UNKNOWN;return"TRACE"==e?o=LogLevel.TRACE:"DEBUG"==e?o=LogLevel.DEBUG:"INFO"==e?o=LogLevel.INFO:"WARN"==e?o=LogLevel.WARN:"ERROR"==e?o=LogLevel.ERROR:"FATAL"==e?o=LogLevel.FATAL:"OFF"==e&&(o=LogLevel.OFF),o}const LogLevel={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,FATAL:5,OFF:6,UNKNOWN:9};let _loggingLevel=LogLevel.OFF,_isLogging=!1;var _logger=()=>({trace:(()=>_loggingLevel<=LogLevel.TRACE&&_isLogging?console.debug.bind(console,"%s%s","["+(new Date).toJSON()+"] [TRACE] (clstorage)  "):()=>{})(),debug:(()=>_loggingLevel<=LogLevel.DEBUG&&_isLogging?console.debug.bind(console,"%s%s","["+(new Date).toJSON()+"] [DEBUG] (clstorage)  "):()=>{})(),log:(()=>_loggingLevel<=LogLevel.INFO&&_isLogging?console.info.bind(console,"%s%s","["+(new Date).toJSON()+"] [INFO] (clstorage)  "):()=>{})(),object:(()=>_loggingLevel<=LogLevel.INFO&&_isLogging?console.info.bind(console,"%s%o","["+(new Date).toJSON()+"] [INFO] (clstorage)  "):()=>{})(),info:(()=>_loggingLevel<=LogLevel.INFO&&_isLogging?console.info.bind(console,"%s%s","["+(new Date).toJSON()+"] [INFO] (clstorage)  "):()=>{})(),warn:(()=>_loggingLevel<=LogLevel.WARN&&_isLogging?console.warn.bind(console,"%s%s","["+(new Date).toJSON()+"] [WARN] (clstorage)  "):()=>{})(),error:(()=>_loggingLevel<=LogLevel.ERROR&&_isLogging?console.error.bind(console,"%s%s","["+(new Date).toJSON()+"] [ERROR] (clstorage)  "):()=>{})(),errobj:(()=>_loggingLevel<=LogLevel.ERROR&&_isLogging?console.error.bind(console,"%s%o","["+(new Date).toJSON()+"] [ERROR] (clstorage)  "):()=>{})(),fatal:(()=>_loggingLevel<=LogLevel.FATAL&&_isLogging?console.error.bind(console,"%s%s","["+(new Date).toJSON()+"] [FATAL] (clstorage)  "):()=>{})()});export async function setLevel(e){return _convertStringIntoLevel(e)<=LogLevel.OFF&&_isLogging?_logger().info("Log level was set to "+e+" ("+_convertStringIntoLevel(e)+")."):_convertStringIntoLevel(e)>LogLevel.OFF&&_isLogging&&_logger().info("Log level was set to UNKNOWN ("+_convertStringIntoLevel(e)+")."),_loggingLevel=_convertStringIntoLevel(e),!0}export async function setLogging(e){return 1!=e||_isLogging?1!=e&&_isLogging&&_logger().info("Disabled clstorage logging."):_logger().info("Enabled clstorage logging."),_isLogging=e,!0}export async function readConfig(e){_logger().trace("readConfig() was called.");let o="undefined";return null!==e&&"string"==typeof e&&await chrome.storage.local.get([e]).then(g=>{_logger().debug("current config."+e+" was",g[e],"."),o=g[e]}).catch(o=>{_logger().error("Failed to get config."+e+". Reason:",o)}),o}export async function readConfigs(e){_logger().trace("readConfigs() was called.");let o="undefined";return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===Array.prototype?await chrome.storage.local.get([...e]).then(g=>{_logger().debug("current config["+[...e]+"] were",g,"."),o=g}).catch(o=>{_logger().error("Failed to get config["+[...e]+"]. Reason:",o)}):null!==e&&"string"==typeof e?await chrome.storage.local.get([e]).then(g=>{_logger().debug("current config."+e+" was",g[e],"."),o=g}).catch(o=>{_logger().error("Failed to get config."+e+". Reason:",o)}):null===e&&await chrome.storage.local.get(null).then(e=>{_logger().debug("current configs were",e,"."),o=e}).catch(e=>{_logger().error("Failed to get all of configs. Reason:",e)}),o}export async function storeConfig(e,o){_logger().trace("storeConfig() was called."),""!==o&&null!==o||(o="''");let g=!1;return null!==e&&"string"==typeof e&&await chrome.storage.local.set({[e]:o}).then(()=>{_logger().info("config."+e+" was newly set to",o,"."),g=!0}).catch(o=>{_logger().error("Failed to set config."+e+". Reason:",o)}),g}export async function removeConfig(e){_logger().trace("removeConfig() was called.");let o=!1;return null!==e&&"string"==typeof e&&await chrome.storage.local.remove([e]).then(()=>{_logger().info("config."+e+" was removed."),o=!0}).catch(o=>{_logger().error("Failed to remove config."+e+". Reason:",o)}),o}export async function removeConfigs(e){_logger().trace("removeConfigs() was called.");let o=!1;return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===Array.prototype?await chrome.storage.local.remove([...e]).then(()=>{_logger().info("config["+[...e]+"] were removed."),o=!0}).catch(o=>{_logger().error("Failed to remove config["+[...e]+"]. Reason:",o)}):null!==e&&"string"==typeof e&&await chrome.storage.local.remove([e]).then(()=>{_logger().info("config."+e+" was removed."),o=!0}).catch(o=>{_logger().error("Failed to remove config."+e+". Reason:",o)}),o}export async function clearConfigs(){_logger().trace("clearConfigs() was called.");let e=!1;return await chrome.storage.local.clear().then(()=>{_logger().info("All configs and caches were cleared."),e=!0}).catch(e=>{_logger().error("Failed to clear all of data. Reason:",e)}),e}